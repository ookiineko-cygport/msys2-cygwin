Backport of https://github.com/okuoku/llvm-project/commit/b749e9c576f6e1ddb068a13af100372650f213f2

--- origsrc/llvm-11.0.0.src/lib/CodeGen/TargetLoweringObjectFileImpl.cpp	2020-10-07 18:10:48.000000000 +0800
+++ src/llvm-11.0.0.src/lib/CodeGen/TargetLoweringObjectFileImpl.cpp	2023-07-25 20:47:30.147327200 +0800
@@ -1518,7 +1518,7 @@
       // Append "$symbol" to the section name *before* IR-level mangling is
       // applied when targetting mingw. This is what GCC does, and the ld.bfd
       // COFF linker will not properly handle comdats otherwise.
-      if (getContext().getTargetTriple().isWindowsGNUEnvironment())
+      if (getContext().getTargetTriple().isOSCygMing())
         raw_svector_ostream(Name) << '$' << ComdatGV->getName();
 
       return getContext().getCOFFSection(Name, Characteristics, Kind,
--- origsrc/llvm-11.0.0.src/lib/Target/TargetMachine.cpp	2020-10-07 18:10:48.000000000 +0800
+++ src/llvm-11.0.0.src/lib/Target/TargetMachine.cpp	2023-07-25 20:48:41.208949800 +0800
@@ -128,7 +128,7 @@
     // don't assume the variables to be DSO local unless we actually know
     // that for sure. This only has to be done for variables; for functions
     // the linker can insert thunks for calling functions from another DLL.
-    if (TT.isWindowsGNUEnvironment() && GV->isDeclarationForLinker() &&
+    if (TT.isOSCygMing() && GV->isDeclarationForLinker() &&
         isa<GlobalVariable>(GV))
       return false;
 
