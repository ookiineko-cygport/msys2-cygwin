--- origsrc/libcxxabi-9.0.1.src/include/cxxabi.h	2020-05-05 04:39:52.380228200 -0400
+++ src/libcxxabi-9.0.1.src/include/cxxabi.h	2020-05-05 04:40:59.286718100 -0400
@@ -159,7 +159,7 @@ __cxa_decrement_exception_refcount(void
 extern _LIBCXXABI_FUNC_VIS bool __cxa_uncaught_exception() throw();
 extern _LIBCXXABI_FUNC_VIS unsigned int __cxa_uncaught_exceptions() throw();
 
-#if defined(__linux__) || defined(__Fuchsia__)
+#if defined(__linux__) || defined(__Fuchsia__) || defined(__CYGWIN__)
 // Linux and Fuchsia TLS support. Not yet an official part of the Itanium ABI.
 // https://sourceware.org/glibc/wiki/Destructor%20support%20for%20thread_local%20variables
 extern _LIBCXXABI_FUNC_VIS int __cxa_thread_atexit(void (*)(void *), void *,
--- origsrc/libcxxabi-9.0.1.src/src/cxa_thread_atexit.cpp	2019-12-11 14:15:30.000000000 -0500
+++ src/libcxxabi-9.0.1.src/src/cxa_thread_atexit.cpp	2020-05-05 04:40:59.302237100 -0400
@@ -112,9 +112,12 @@ extern "C" {
 #ifdef HAVE___CXA_THREAD_ATEXIT_IMPL
     return __cxa_thread_atexit_impl(dtor, obj, dso_symbol);
 #else
+#if !(defined __CYGWIN__ || defined _WIN32)
     if (__cxa_thread_atexit_impl) {
       return __cxa_thread_atexit_impl(dtor, obj, dso_symbol);
-    } else {
+    } else
+#endif
+   {
       // Initialize the dtors std::__libcpp_tls_key (uses __cxa_guard_*() for
       // one-time initialization and __cxa_atexit() for destruction)
       static DtorsManager manager;
